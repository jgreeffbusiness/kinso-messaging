generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                   @id @default(cuid())
  email              String?
  authId             String                   @unique
  authProvider       String?
  createdAt          DateTime                 @default(now())
  googleAccessToken  String?
  googleIntegrations Json?
  googleRefreshToken String?
  googleTokenExpiry  DateTime?
  name               String?
  photoUrl           String?
  slackAccessToken   String?
  slackIntegrations  Json?
  slackRefreshToken  String?
  slackTeamId        String?
  slackTokenExpiry   DateTime?
  slackUserId        String?
  updatedAt          DateTime                 @updatedAt
  blacklistedSenders BlacklistedSender[]
  contacts           Contact[]
  contactMessages    ContactMessage[]
  messages           Message[]
  notes              Note[]
  pendingApprovals   PendingContactApproval[]
}

model Contact {
  id              String           @id @default(cuid())
  userId          String
  fullName        String
  email           String?
  createdAt       DateTime         @default(now())
  googleContactId String?          @unique
  googleId        String?          @unique
  phone           String?
  phoneNumber     String?
  photoUrl        String?
  platformData    Json?
  source          String?
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  contactMessages ContactMessage[]
  messages        Message[]
  notes           Note[]
}

model Message {
  id                String    @id @default(cuid())
  userId            String
  contactId         String
  platform          String
  timestamp         DateTime  // External platform's original message timestamp
  content           String
  platformData      Json?
  platformMessageId String
  readAt            DateTime?
  createdAt         DateTime  @default(now()) // Timestamp for when record is created in our DB
  updatedAt         DateTime  @updatedAt      // Timestamp for when record is updated in our DB
  contact           Contact   @relation(fields: [contactId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
  summary           Summary?
}

model Summary {
  id          String  @id @default(cuid())
  messageId   String  @unique
  summaryText String
  actionJson  Json
  message     Message @relation(fields: [messageId], references: [id])
}

model ContactMessage {
  id        String   @id @default(cuid())
  userId    String
  contactId String
  messageId String
  threadId  String
  createdAt DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, contactId])
  @@index([userId])
  @@index([contactId])
  @@index([threadId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  contactId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([userId])
}

model PendingContactApproval {
  id               String           @id @default(cuid())
  userId           String
  platform         String
  senderName       String
  senderEmail      String?
  senderHandle     String?
  messageCount     Int              @default(1)
  firstMessageDate DateTime
  lastMessageDate  DateTime
  previewContent   String?
  createdAt        DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages         PendingMessage[]

  @@index([userId])
  @@index([platform])
}

model PendingMessage {
  id                String                 @id @default(cuid())
  pendingApprovalId String
  content           String
  timestamp         DateTime
  platformMessageId String
  createdAt         DateTime               @default(now())
  pendingApproval   PendingContactApproval @relation(fields: [pendingApprovalId], references: [id], onDelete: Cascade)

  @@index([pendingApprovalId])
}

model BlacklistedSender {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  senderName   String?
  senderEmail  String?
  senderHandle String?
  reason       String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, senderEmail])
  @@unique([userId, platform, senderHandle])
  @@index([userId])
  @@index([platform])
}
