// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  authId             String         @unique // Generic external auth ID
  authProvider       String? // "firebase", "auth0", etc.
  email              String?
  name               String?
  photoUrl           String?
  googleAccessToken  String?
  googleRefreshToken String?
  googleTokenExpiry  DateTime?
  googleIntegrations Json?
  slackAccessToken   String?
  slackRefreshToken  String?
  slackTokenExpiry   DateTime?
  slackTeamId        String?
  slackUserId        String?
  slackIntegrations  Json?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  contacts           Contact[]
  messages           Message[]
  contactMessages    ContactMessage[]
  notes              Note[]
  pendingApprovals   PendingContactApproval[]
  blacklistedSenders BlacklistedSender[]
}

model Contact {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  fullName        String
  email           String?
  phoneNumber     String?
  photoUrl        String?
  googleContactId String?        @unique
  messages        Message[]
  googleId        String?        @unique
  phone           String?
  source          String? // "google", "manual", etc.
  platformData    Json?          // Cross-platform identity information
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contactMessages ContactMessage[]
  notes           Note[]
}

model Message {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  contact           Contact  @relation(fields: [contactId], references: [id])
  contactId         String
  platform          String
  platformData      Json?
  platformMessageId String
  timestamp         DateTime
  content           String
  readAt            DateTime?
  summary           Summary?
}

model Summary {
  id          String  @id @default(cuid())
  messageId   String  @unique
  summaryText String
  actionJson  Json
  message     Message @relation(fields: [messageId], references: [id])
}

model ContactMessage {
  id         String   @id @default(cuid())
  userId     String
  contactId  String
  messageId  String
  threadId   String
  createdAt  DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([messageId, contactId])
  @@index([userId])
  @@index([contactId])
  @@index([threadId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  contactId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([userId])
}

model PendingContactApproval {
  id               String           @id @default(cuid())
  userId           String
  platform         String
  senderName       String
  senderEmail      String?
  senderHandle     String?
  messageCount     Int              @default(1)
  firstMessageDate DateTime
  lastMessageDate  DateTime
  previewContent   String?
  createdAt        DateTime         @default(now())

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages         PendingMessage[]

  @@index([userId])
  @@index([platform])
}

model PendingMessage {
  id                  String                  @id @default(cuid())
  pendingApprovalId   String
  content             String
  timestamp           DateTime
  platformMessageId   String
  createdAt           DateTime                @default(now())

  // Relations
  pendingApproval     PendingContactApproval  @relation(fields: [pendingApprovalId], references: [id], onDelete: Cascade)

  @@index([pendingApprovalId])
}

model BlacklistedSender {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  senderName   String?
  senderEmail  String?
  senderHandle String?
  reason       String?
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform])
  @@unique([userId, platform, senderEmail])
  @@unique([userId, platform, senderHandle])
}
